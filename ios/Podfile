# Resolve react_native_pods.rb with node to allow for hoisting.
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '15.1'
workspace 'jitsi-meet'

install! 'cocoapods', :deterministic_uuids => false

def cocoa_utilities
    pod 'CocoaLumberjack', '3.7.4'
end

target 'JitsiMeet' do
  project 'app/app.xcodeproj'

  pod 'Firebase/Analytics', '~> 8.0'
  pod 'Firebase/Crashlytics', '~> 8.0'
end

target 'JitsiMeetSDK' do
  project 'sdk/sdk.xcodeproj'

  # React Native and its dependencies
  #

  config = use_native_modules!
  flags = get_default_flags()
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :fabric_enabled => false,
    :new_arch_enabled => false,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # We use auto linking, but some dependencies are excluded from the lite build
  # (see react-native.config.js) so we add them here.

  pod 'giphy-react-native-sdk', :path => '../node_modules/@giphy/react-native-sdk'
  pod 'RNCalendarEvents', :path => '../node_modules/react-native-calendar-events'
  pod 'RNGoogleSignin', :path => '../node_modules/@react-native-google-signin/google-signin'
  pod 'RNWatch', :path => '../node_modules/react-native-watch-connectivity'
  # Force JitsiWebRTC pod to use local repo
  pod 'JitsiWebRTC', :path => '../../webrtc/ios'
  # Force react-native-webrtc to use local repository instead of node_modules
  pod 'react-native-webrtc', :path => '../../react-native-webrtc'

  # Native pod dependencies
  #

  cocoa_utilities
  pod 'ObjectiveDropboxOfficial', '6.2.3'
end

target 'JitsiMeetSDKLite' do
    project 'sdk/sdk.xcodeproj'

    # This is a more lightweight target, which removes some functionality.
    # Check the react-native.config.js for the list of excluded packages.

    # React Native and its dependencies
    #

    config = use_native_modules!
    use_react_native!(
      :path => config[:reactNativePath],
      :hermes_enabled => true,
      :fabric_enabled => false,
      :new_arch_enabled => false,
      # An absolute path to your application root.
      :app_path => "#{Pod::Config.instance.installation_root}/.."
    )

    # Native pod dependencies
    #

    cocoa_utilities
    # Force JitsiWebRTC pod to use local repo for the Lite target as well
    pod 'JitsiWebRTC', :path => '../../webrtc/ios'
    # Force react-native-webrtc to use local repository for the Lite target as well
    pod 'react-native-webrtc', :path => '../../react-native-webrtc'
end

post_install do |installer|

  react_native_post_install(
    installer,
    use_native_modules![:reactNativePath],
    :mac_catalyst_enabled => false,
    # :ccache_enabled => true
  )
  installer.pods_project.targets.each do |target|
    # https://github.com/CocoaPods/CocoaPods/issues/11402
    if target.respond_to?(:product_type) and target.product_type == "com.apple.product-type.bundle"
      target.build_configurations.each do |config|
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      end
    end

    target.build_configurations.each do |config|
      config.build_settings['SUPPORTS_MACCATALYST'] = 'NO'
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'
      config.build_settings['OTHER_SWIFT_FLAGS'] = '$(inherited) -no-verify-emitted-module-interface'
    end
  end

  # Patch SocketRocket to support TLS 1.3
  %x(patch Pods/SocketRocket/SocketRocket/SRSecurityPolicy.m -N < patches/ws-tls13.diff)

  # Ensure local WebRTC.xcframework is available under Pods/JitsiWebRTC for tools expecting that path.
  begin
    require 'fileutils'
    pods_root = File.join(__dir__, 'Pods')
    jwr_dir = File.join(pods_root, 'JitsiWebRTC')
    FileUtils.mkdir_p(jwr_dir)
    src = File.expand_path(File.join(__dir__, '..', '..', 'webrtc', 'ios', 'WebRTC.xcframework'))
    dest = File.join(jwr_dir, 'WebRTC.xcframework')
    if File.exist?(src)
      # Prefer a real copy to avoid any toolchain quirks with symlinks
      FileUtils.rm_rf(dest)
      system('rsync', '-a', '--delete', src + '/', dest + '/')
    else
      puts "[post_install] Warning: Missing local WebRTC.xcframework at #{src}"
    end
  rescue => e
    puts "[post_install] Warning: Failed to prepare Pods/JitsiWebRTC/WebRTC.xcframework symlink: #{e}"
  end

  # Make sure react-native-webrtc target can import the WebRTC module at compile time
  begin
    webrtc_slice_device = File.expand_path(File.join(__dir__, '..', '..', 'webrtc', 'ios', 'WebRTC.xcframework', 'ios-arm64'))
    webrtc_slice_sim = File.expand_path(File.join(__dir__, '..', '..', 'webrtc', 'ios', 'WebRTC.xcframework', 'ios-arm64_x86_64-simulator'))
    installer.pods_project.targets.each do |t|
      next unless t.name == 'react-native-webrtc'
      t.build_configurations.each do |config|
        fpaths = config.build_settings['FRAMEWORK_SEARCH_PATHS'] || '$(inherited)'
        hpaths = config.build_settings['HEADER_SEARCH_PATHS'] || '$(inherited)'
        config.build_settings['FRAMEWORK_SEARCH_PATHS'] = [fpaths, webrtc_slice_device, webrtc_slice_sim]
        config.build_settings['HEADER_SEARCH_PATHS'] = [hpaths, File.join(webrtc_slice_device, 'WebRTC.framework', 'Headers'), File.join(webrtc_slice_sim, 'WebRTC.framework', 'Headers')]
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      end
    end
    # Also patch the generated xcconfig files to be safe
    %w(debug release).each do |cfg|
      xc = File.join(__dir__, 'Pods', 'Target Support Files', 'react-native-webrtc', "react-native-webrtc.#{cfg}.xcconfig")
      next unless File.exist?(xc)
      File.open(xc, 'a') do |f|
        f.puts %(FRAMEWORK_SEARCH_PATHS = $(inherited) "${PODS_ROOT}/JitsiWebRTC/WebRTC.xcframework/ios-arm64" "${PODS_ROOT}/JitsiWebRTC/WebRTC.xcframework/ios-arm64_x86_64-simulator")
        f.puts %(HEADER_SEARCH_PATHS = $(inherited) "${PODS_ROOT}/JitsiWebRTC/WebRTC.xcframework/ios-arm64/WebRTC.framework/Headers" "${PODS_ROOT}/JitsiWebRTC/WebRTC.xcframework/ios-arm64_x86_64-simulator/WebRTC.framework/Headers")
        f.puts %(CLANG_ENABLE_MODULES = YES)
        f.puts %(OTHER_MODULE_VERIFIER_FLAGS = $(inherited) -F"${PODS_ROOT}/JitsiWebRTC/WebRTC.xcframework/ios-arm64" -F"${PODS_ROOT}/JitsiWebRTC/WebRTC.xcframework/ios-arm64_x86_64-simulator")
      end
    end
  rescue => e
    puts "[post_install] Warning: Failed to adjust build settings for react-native-webrtc: #{e}"
  end

end
